import json
import logging
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
from telegram.error import BadRequest

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк ржХрж░рзБржи
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

# ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐ржЧржд ржЯрзЛржХрзЗржи ржПржмржВ ржЖржЗржбрж┐ ржПржЦрж╛ржирзЗ ржжрж┐ржиред
# ржПржЗ ржорж╛ржиржЧрзБрж▓рзЛ рж╕рж░рж╛рж╕рж░рж┐ ржХрзЛржбрзЗ ржирж╛ ржжрж┐рзЯрзЗ Render-ржПрж░ ржПржиржнрж╛рзЯрж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж╣рж┐рж╕рзЗржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржирж┐рж░рж╛ржкржжред
# рждржмрзЗ ржЖржкржирж╛рж░ рж╕рзБржмрж┐ржзрж╛рж░ ржЬржирзНржп ржПржЦрж╛ржирзЗ рж╕рж░рж╛рж╕рж░рж┐ ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛред
BOT_TOKEN = "7845699149:AAEEKpzHFt5gd6LbApfXSsE8de64f8IaGx0"
ADMIN_CHANNEL_ID = -1002944346537  # ржЯржк-ржЖржк рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯрзЗрж░ ржЬржирзНржп
PUBLIC_CHANNEL_ID = -1003036699455  # ржкрж╛ржмрж▓рж┐ржХ ржЖржкржбрзЗржЯрзЗрж░ ржЬржирзНржп

# --- ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
def load_data(file_name):
    """JSON ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рзЗред"""
    try:
        with open(file_name, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data, file_name):
    """ржбрзЗржЯрж╛ JSON ржлрж╛ржЗрж▓рзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗред"""
    with open(file_name, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# --- ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
def start(update: Update, context: CallbackContext) -> None:
    """ржмржЯ рж╢рзБрж░рзБ рж╣рж▓рзЗ ржПржЗ ржХржорж╛ржирзНржбржЯрж┐ ржХрж╛ржЬ ржХрж░рзЗред"""
    update.message.reply_text('рж╕рзНржмрж╛ржЧрждржо! ржЖржорж┐ ржЖржкржирж╛рж░ ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯ ржмржЯред /help рж▓рж┐ржЦрзЗ ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЗржиред')

def help_command(update: Update, context: CallbackContext) -> None:
    """рж╕рж╣рж╛ржпрж╝рждрж╛ ржХржорж╛ржирзНржбред"""
    update.message.reply_text(
        """
        ржХржорж╛ржирзНржбрж╕ржорзВрж╣:
        /mybalance - ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрзЗржЦрзБржиред
        /topup [ржЯрж╛ржХрж╛] [ржЯрзНрж░рж╛ржиржЬрзНржпрж╛ржХрж╢ржи_ржЖржЗржбрж┐] - ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЯржк ржЖржк ржХрж░рж╛рж░ ржЬржирзНржпред
        /buyua - ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯ ржХрж┐ржирзБржиред
        /rules - ржмржЯрзЗрж░ ржирж┐ржпрж╝ржорж╛ржмрж▓рзА ржжрзЗржЦрзБржиред
        """
    )

def rules_command(update: Update, context: CallbackContext) -> None:
    """ржирж┐ржпрж╝ржорж╛ржмрж▓рзА ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп ржХржорж╛ржирзНржбред"""
    update.message.reply_text(
        """
        ржмржЯ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐ржпрж╝ржорж╛ржмрж▓рзА:
        - ржХрзЛржирзЛ ржнрзБрж▓ ржЯрзНрж░рж╛ржиржЬрзНржпрж╛ржХрж╢ржи ржЖржЗржбрж┐ ржжрж┐рж▓рзЗ ржЯржк ржЖржк рж╣ржмрзЗ ржирж╛ред
        - ржПржХржмрж╛рж░ ржХрзЗржирж╛ ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯ ржЖрж░ ржлрзЗрж░ржд ржирзЗржУрзЯрж╛ рж╣ржмрзЗ ржирж╛ред
        - рж╕ржХрж▓ ржкрзНрж░ржХрж╛рж░ рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржирзЗрж░ ржЬржирзНржп рж╕рж╛ржкрзЛрж░рзНржЯ ржЯрж┐ржорзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред
        """
    )

# --- ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржПржмржВ ржЯржк-ржЖржк ---
def my_balance(update: Update, context: CallbackContext) -> None:
    """ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрзЗржЦрж╛ржпрж╝ред"""
    user_id = str(update.effective_user.id)
    user_data = load_data('user_data.json')
    balance = user_data.get(user_id, {}).get('balance', 0)
    update.message.reply_text(f"ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${balance:.2f}")

def top_up(update: Update, context: CallbackContext) -> None:
    """ржЯржк-ржЖржк рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрж╛ржарж╛ржпрж╝ред"""
    try:
        if len(context.args) < 2:
            update.message.reply_text("ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐ржпрж╝ржо: /topup [ржЯрж╛ржХрж╛рж░ ржкрж░рж┐ржорж╛ржг] [ржЯрзНрж░рж╛ржиржЬрзНржпрж╛ржХрж╢ржи ржЖржЗржбрж┐]")
            return
        
        amount = float(context.args[0])
        transaction_id = " ".join(context.args[1:])
        user = update.effective_user
        
        message = (
            f"ЁЯТ░ **ржирждрзБржи ржЯржк-ржЖржк рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ!**\n\n"
            f"**ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐:** `{user.id}`\n"
            f"**ржЗржЙржЬрж╛рж░ржирзЗржо:** @{user.username or 'N/A'}\n"
            f"**ржкрж░рж┐ржорж╛ржг:** ${amount:.2f}\n"
            f"**ржЯрзНрж░рж╛ржиржЬрзНржпрж╛ржХрж╢ржи ржЖржЗржбрж┐:** `{transaction_id}`\n\n"
            "ржЖржкржирж┐ ржХрж┐ ржПржЗ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯржЯрж┐ ржЧрзНрж░рж╣ржг ржХрж░рждрзЗ ржЪрж╛ржи?"
        )
        
        keyboard = [
            [InlineKeyboardButton("тЬЕ ржПржХрж╕рзЗржкрзНржЯ", callback_data=f'accept_{user.id}_{amount}'),
             InlineKeyboardButton("тЭМ рж░рж┐ржЬрзЗржХрзНржЯ", callback_data=f'reject_{user.id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        context.bot.send_message(
            chat_id=ADMIN_CHANNEL_ID,
            text=message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        update.message.reply_text("ржЖржкржирж╛рж░ ржЯржк-ржЖржк рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯржЯрж┐ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред ржжржпрж╝рж╛ ржХрж░рзЗ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")

    except ValueError:
        update.message.reply_text("ржЯрж╛ржХрж╛рж░ ржкрж░рж┐ржорж╛ржгржЯрж┐ ржнрзБрж▓ред ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред")
    except Exception as e:
        update.message.reply_text(f"ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {e}")

# --- ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯ рж▓рзЛржб ржПржмржВ рж╕рж░ржмрж░рж╛рж╣ ---
def buy_user_agent(update: Update, context: CallbackContext) -> None:
    """ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯ ржмрж┐ржХрзНрж░рж┐ ржХрж░рзЗред"""
    price = 10  # ржПржХржЯрж┐ ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯрзЗрж░ ржжрж╛ржо
    user_id = str(update.effective_user.id)
    user_data = load_data('user_data.json')
    
    if user_id not in user_data:
        user_data[user_id] = {"balance": 0}

    current_balance = user_data[user_id].get('balance', 0)

    if current_balance < price:
        update.message.reply_text(f"ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржпржерзЗрж╖рзНржЯ ржиржпрж╝ред ржПржХржЯрж┐ ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯрзЗрж░ ржжрж╛ржо ${price}ред ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${current_balance:.2f}ред")
        return

    ua_data = load_data('user_agents.json')
    available_uas = [ua for ua in ua_data if ua.get('status') == 'available']

    if not available_uas:
        update.message.reply_text("ржжрзБржГржЦрж┐ржд, ржмрж░рзНрждржорж╛ржирзЗ ржХрзЛржирзЛ ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯ ржирзЗржЗред ржирждрзБржи рж╕рзНржЯржХрзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")
        return
        
    ua_to_sell = available_uas[0]
    
    # ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЖржкржбрзЗржЯ ржХрж░рзБржи
    user_data[user_id]['balance'] -= price
    save_data(user_data, 'user_data.json')
    
    # ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЖржкржбрзЗржЯ ржХрж░рзБржи
    for ua in ua_data:
        if ua.get('id') == ua_to_sell.get('id'):
            ua['status'] = 'sold'
            break
    save_data(ua_data, 'user_agents.json')

    update.message.reply_text(f"ржЖржкржирж╛рж░ ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯржЯрж┐:\n\n`{ua_to_sell['user_agent']}`\n\n"
                              f"ржЖржкржирж╛рж░ ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${user_data[user_id]['balance']:.2f}")
    
    try:
        context.bot.send_message(
            chat_id=PUBLIC_CHANNEL_ID,
            text=f"ЁЯе│ ржПржХржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж╕ржлрж▓ржнрж╛ржмрзЗ ржПржХржЯрж┐ ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯ ржХрж┐ржирзЗржЫрзЗржи! ржирждрзБржи рж╕рзНржЯржХ ржЖрж╕ржЫрзЗ..."
        )
    except BadRequest:
        logging.error("ржкрж╛ржмрж▓рж┐ржХ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржмржЯржЯрж┐ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржПржмржВ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛрж░ ржЕржирзБржорждрж┐ ржЖржЫрзЗред")

# --- ржЕрзНржпрж╛ржбржорж┐ржи ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
def button_callback(update: Update, context: CallbackContext) -> None:
    """ржЕрзНржпрж╛ржбржорж┐ржи ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржмрж╛ржЯржиржЧрзБрж▓рзЛ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рзЗред"""
    query = update.callback_query
    query.answer()
    
    data = query.data.split('_')
    action = data[0]
    user_id = data[1]

    user_data = load_data('user_data.json')

    if action == 'accept':
        amount = float(data[2])
        
        if user_id not in user_data:
            user_data[user_id] = {"balance": 0}
        
        user_data[user_id]['balance'] += amount
        save_data(user_data, 'user_data.json')
        
        try:
            # ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржи
            context.bot.send_message(
                chat_id=user_id,
                text=f"тЬЕ ржЖржкржирж╛рж░ ржЯржк-ржЖржк рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ! ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ${amount:.2f} ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред"
            )
            query.edit_message_text(f"ржПржЗ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯржЯрж┐ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        except BadRequest:
            query.edit_message_text("ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржпрж╝ржирж┐ред")
            logging.error(f"ржЗржЙржЬрж╛рж░ ID {user_id} ржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржпрж╝ржирж┐ред")

    elif action == 'reject':
        try:
            context.bot.send_message(
                chat_id=user_id,
                text=f"тЭМ ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржЯржк-ржЖржк рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯржЯрж┐ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ рж╕рж╛ржкрзЛрж░рзНржЯрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред"
            )
            query.edit_message_text(f"ржПржЗ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯржЯрж┐ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        except BadRequest:
            query.edit_message_text("ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржпрж╝ржирж┐ред")
            logging.error(f"ржЗржЙржЬрж╛рж░ ID {user_id} ржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржпрж╝ржирж┐ред")

# --- ржкрзНрж░ржзрж╛ржи ржлрж╛ржВрж╢ржи ---
def main() -> None:
    """ржмржЯрзЗрж░ ржкрзНрж░ржзрж╛ржи ржкрзНрж░ржмрзЗрж╢ ржмрж┐ржирзНржжрзБред"""
    #Updater ржЕржмржЬрзЗржХрзНржЯржЯрж┐ BOT_TOKEN ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
    #ржЖржЧрзЗрж░ рждрзНрж░рзБржЯрж┐ржкрзВрж░рзНржг ржХрзЛржбрзЗ ржерж╛ржХрж╛ 'update_queue' ржЖрж░рзНржЧрзБржорзЗржирзНржЯржЯрж┐ ржПржЦрж╛ржирзЗ ржирзЗржЗред
    updater = Updater(BOT_TOKEN)
    dispatcher = updater.dispatcher

    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзБржХрзНржд ржХрж░рзБржи
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("rules", rules_command))
    dispatcher.add_handler(CommandHandler("mybalance", my_balance))
    dispatcher.add_handler(CommandHandler("topup", top_up))
    dispatcher.add_handler(CommandHandler("buyua", buy_user_agent))
    
    # ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзБржХрзНржд ржХрж░рзБржи
    dispatcher.add_handler(CallbackQueryHandler(button_callback))

    # ржкрзЛрж▓рж┐ржВ рж╢рзБрж░рзБ ржХрж░рзБржи
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
